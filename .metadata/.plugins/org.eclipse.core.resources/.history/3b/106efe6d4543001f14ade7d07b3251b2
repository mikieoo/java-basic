package chapter3;

import java.util.*;

public class Package2 {

	public static void main(String[] args) {

		// Collection Framework : Java 에서 데이터 구조에 대한 표준화된 기법을 제공
		
		// List: 데이터를 저장할 때 중복을 허용하고 순서가 존재하는 
		// Collection Framework 에서 데이터 타입을 지정할 땐 제네릭을 사용하여 지정
		
		// ArrayList 구현 클래스 : 인덱스를 이용한 검색
		List<Integer> list = new ArrayList<>();		
		
		// LinkedList 구현 클래스 : 추가, 삭제가 빠름
		list = new LinkedList<>();
		
		// add() : List 에 요소 추가
		// 추가할 요소는 제네릭으로 지정한 데이터 타입의 요소
		
		list.add(99);
		System.out.println(list);
		
		// 데이터 타입 변수로 반환값을 받을 땐 null 이 올 수 있음을 주의
		int number = list.get(0);
		System.out.println(number);
		
		
		// set() : List 의 특정 인덱스 요소를 변경
		
		List<String> stringList = new ArrayList<>();
		stringList.add("apple");
		stringList.add("banana");
		System.out.println(stringList);
		
		stringList.set(0, "grape");
		
		stringList.remove("apple");
		System.out.println(stringList);
		
		// Set : 데이터를 저장할 때 중복을 허용하지 않고 순서가 존재하지 않는 데이터 구조 (집합)
		Set<String> set;
		
		// HashSet 구현 클래스 : 검색이 빠름
		set = new HashSet<>();
		
		// TreeSet 구현 클래스 : 요소를 정렬해서 추가
		set = new TreeSet<>();
		
		set.add("banana");
		System.out.println(set);
		set.add("apple");
		System.out.println(set);
		
		// put() : Map에 키와 값의 쌍을 추가
		// 만약 동일한 키가 존재하면 원래 값을 덮어씌움
		HashMap<String, String> map = new HashMap<>();
		map.put("banana", "바나나");
		map.put("banana", "노란색");
		
	}

}
